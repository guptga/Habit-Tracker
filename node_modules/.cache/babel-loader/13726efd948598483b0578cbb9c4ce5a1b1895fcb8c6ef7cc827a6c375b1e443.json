{"ast":null,"code":"/*!\n * Chart.js v4.1.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing'\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PolarAreaController: PolarAreaController,\n  PieController: PieController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  constructor(options) {\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height1 = chartArea.h * weight;\n      const width1 = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n      }\n      stack.start = x;\n      stack.placed += height1;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  static defaults = {};\n  static defaultRoutes = (() => undefined)();\n  active = false;\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID1 = Object.keys(position)[0];\n      const value1 = position[positionAxisID1];\n      titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret1 = this._getYAxisLabelAlignment(tl);\n      textAlign = ret1.textAlign;\n      x = ret1.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._each('register', args);\n  }\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._each('unregister', args);\n  }\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._each('register', args, this.controllers);\n  }\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    this._each('register', args, this.elements);\n  }\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    this._each('register', args, this.plugins);\n  }\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i1 = 0; i1 < local.length; i1++) {\n    const plugin = local[i1];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n  id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n  if (id) {\n    return id;\n  }\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.1.1\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getDatasetArea(meta) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\nclass Chart {\n  static defaults = (() => defaults)();\n  static instances = (() => instances)();\n  static overrides = (() => overrides)();\n  static registry = (() => registry)();\n  static version = (() => version)();\n  static getChart = (() => getChart)();\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1) {\n      this._updateDataset(i1, isFunction(mode) ? mode({\n        datasetIndex: i1\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = (() => ({\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  }))();\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  static id = 'point';\n  /**\n  * @type {any}\n  */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = (() => ({\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  }))();\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  LineElement: LineElement,\n  PointElement: PointElement,\n  BarElement: BarElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      options: {\n        elements\n      },\n      data: {\n        datasets\n      }\n    } = chart.config;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox1 of hitboxes) {\n        if (hitbox1.col !== col) {\n          col = hitbox1.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox1.top = top;\n        hitbox1.left += this.left + padding;\n        hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n        top += hitbox1.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  static positioners = (() => positioners)();\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = (() => ({\n    ticks: {\n      callback: _getLabelForValue\n    }\n  }))();\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({\n      value: Math.round((niceMin + j * spacing) * factor) / factor\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = (() => ({\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  }))();\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = (() => ({\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  }))();\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign,\n      left,\n      top,\n      right,\n      bottom\n    } = scale._pointLabelItems[i];\n    const {\n      backdropColor\n    } = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = (() => ({\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n      callback(label) {\n        return label;\n      },\n      padding: 5,\n      centerPointLabels: false\n    }\n  }))();\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = (() => TimeScale.defaults)();\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","arguments","length","Date","now","remaining","running","items","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isNumberFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","_ref","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","height1","width1","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","positionAxisID1","value1","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","callback","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","ticksLength","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","ret1","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_len","_key","_each","_len2","_key2","addControllers","_len3","_key3","_len4","_key4","addPlugins","_len5","_key5","addScales","_len6","_key6","getController","_get","getPlugin","getScale","removeControllers","_len7","_key7","removeElements","_len8","_key8","removePlugins","_len9","_key9","removeScales","_len10","_key10","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","i1","getOpts","_ref2","pluginOpts","_ref3","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","ilen1","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_ref4","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius$1","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","pCenter1","innerMidAdjustedAngle","pCenter2","p8","pCenter3","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","parseBorderRadius","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","plugin_colors","forceOverride","_args","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","configurable","enumerable","d","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_ref5","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","hitbox1","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","_ref6","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","_ref7","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","_ref8","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.animator.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.animation.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.animations.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.datasetController.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\controllers\\controller.line.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.adapters.ts","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.interaction.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.layouts.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\platform\\platform.base.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\platform\\platform.basic.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\platform\\platform.dom.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\platform\\index.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.element.ts","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.scale.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.registry.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.plugins.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.config.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\core\\core.controller.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\elements\\element.arc.ts","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\elements\\element.line.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\elements\\element.point.ts","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\elements\\element.bar.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\scales\\scale.category.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\scales\\scale.linear.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\scales\\scale.time.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","D:\\Github\\Habit-Tracker\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing',\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n\n  id = scaleOptions.axis\n    || axisFromPosition(scaleOptions.position)\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n\n  if (id) {\n    return id;\n  }\n\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      options: {elements},\n      data: {datasets}\n    } = chart.config;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n\n    items.push({\n      // Text position\n      x: pointLabelPosition.x,\n      y,\n\n      // Text rendering data\n      textAlign,\n\n      // Bounding box\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guestimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}